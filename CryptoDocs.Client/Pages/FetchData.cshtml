@using System.Text
@using CryptoDocs.Shared
@using CryptoDocs.Shared.Dto
@using CryptoDocs.Shared.Rsa
@using MoreLinq
@page "/fetchdata"
@inject HttpClient _http
@inject ISymmetricCryptoProvider _сryptoProvider

<p>Key pair</p>
<div><textarea bind="@KeyPairString"></textarea></div>
<div><button class="btn btn-primary" onclick="@GetSessionKey">Get session key</button></div>

@if (SessionKey != null)
{
    <p>Session key:</p>
    <p>@Convert.ToBase64String(SessionKey)</p>

    <p>File name</p>
    <div><input type="text" bind="@FileName" onchange=@SetDirty /></div>
    <p>File name</p>
    <div>
        <textarea bind="@FileContent" onchange=@SetDirty></textarea>
    </div>
    <div>
        <button class="btn btn-primary" onclick="@GetFile">Get</button>
        <button class="btn btn-danger" onclick="@SetFile">Set</button>
    </div>
}

@if (IsSaved)
{
    <span>Same with server</span>
}

@functions {

byte[] SessionKey { get; set; }

RsaKeyPair KeyPair { get; set; }

string KeyPairString { get; set; }

string FileName { get; set; }

string FileContent { get; set; }

bool IsSaved { get; set; }


async Task GetSessionKey()
{
    KeyPair = new RsaKeyPair(KeyPairString);

    var sessionKeyEncryptedBase64 = await _http.PostJsonAsync<string>("api/Data/GetEncryptedSessionKey", KeyPair.PublicKey.ToDto());
    var sessionKeyEncrypted = Convert.FromBase64String(sessionKeyEncryptedBase64);
    SessionKey = KeyPair.PrivateKey.Decrypt(sessionKeyEncrypted);
}

async Task GetFile()
{
    var keys = SessionKey.Batch(32).ToArray();
    //var data = Encoding.UTF32.GetBytes(FileContent);

    var encryptedContentBase64 = await _http.PostJsonAsync<string>($"api/Data/GetFile/{FileName}", KeyPair.PublicKey.ToDto());
    var encryptedContent = Convert.FromBase64String(encryptedContentBase64);
    var data = _сryptoProvider.Decrypt(encryptedContent, keys[0].ToArray(), keys[1].ToArray());
    FileContent = Encoding.UTF8.GetString(data);

    IsSaved = true;
}

async Task SetFile()
{
    var keys = SessionKey.Batch(32).ToArray();
    var data = Encoding.UTF8.GetBytes(FileContent ?? string.Empty);

    var encryptedContent = _сryptoProvider.Encrypt(data, keys[0].ToArray(), keys[1].ToArray());
    var encryptedContentBase64 = Convert.ToBase64String(encryptedContent);
    IsSaved = await _http.PostJsonAsync<bool>($"api/Data/SetFile/{FileName}", new FileRequest
    {
        EncryptedContentBase64 = encryptedContentBase64,
        PublicKeyDto = KeyPair.PublicKey.ToDto()
    }) && false;
}

void SetDirty(UIChangeEventArgs e)
{
    IsSaved = false;
}

}

